# Use a specific design pattern

# Prompt

Design = DDD
Create a C# project structure using Domain-Driven Design (DDD). When I give a function example, recommend the relevant classes, interfaces, and methods, specifying their placement within the DDD layers. For instance, if I say "Database CRUD" for a Customer entity, outline elements like CustomerService, ICustomerRepository, and methods such as Add, Update, Delete. Provide concise pseudocode with namespaces to clearly separate layers (e.g., Domain, Application, Infrastructure). Focus on necessary components only, adhering to SOLID, DRY, and KISS principles.
